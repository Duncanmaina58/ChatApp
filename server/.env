PORT=4000
MONGO_URI=mongodb://localhost:27017/whatsapp_clone
JWT_SECRET=your_jwt_secret_here
JWT_EXPIRES_IN=30d
CLIENT_ORIGIN=http://localhost:5173

CLOUDINARY_CLOUD_NAME=your_cloud_name
CLOUDINARY_API_KEY=your_api_key
CLOUDINARY_API_SECRET=your_api_secret


# //
# WhatsApp Clone Functional Flow (Backend + Frontend)
# 🧱 Step 1: User System (Profile, Auth, JWT)

# We already have this done:

# ✅ Register/Login

# ✅ JWT token saved in localStorage

# ✅ User model with: username, email, password, avatar, isOnline, lastSeen

# Next, we’ll use that info to show My Profile and Other Users in the UI.

# 💎 Step 2: User List / Contacts Page

# Before chatting, you must see who’s available.

# We’ll:

# Fetch all users except yourself

# Display their avatars, names, and status (online/offline)

# Clicking a user opens a private chat (or fetches existing one)

# ➡️ API: GET /api/users
# Returns:

# [
#   {
#     "_id": "123",
#     "username": "John",
#     "email": "john@mail.com",
#     "avatar": "url",
#     "isOnline": true
#   },
#   ...
# ]

# 💌 Step 3: Private Chat (1-to-1)

# When you click on a user, you create or open an existing chat.

# The backend handles it automatically (like WhatsApp opening a thread).

# ➡️ API:

# POST /api/chats
# body: { userId: "otherUserId" }


# This creates a new chat or returns an existing one.

# ➡️ API to get your chats:

# GET /api/chats


# Returns a list of all your chat threads with last messages.

# ➡️ API to fetch messages in a chat:

# GET /api/messages/:chatId


# ➡️ API to send a message:

# POST /api/messages
# body: { chatId: "id", content: "hello" }


# 💡 The Socket.io events we already set up (message_received, new_message) make this real-time.

# 👥 Step 4: Group Chats

# We’ll let users:

# Create a group (POST /api/chats/group)

# Add members (PUT /api/chats/group/add)

# Remove members (PUT /api/chats/group/remove)

# Rename group (PUT /api/chats/group/rename)

# Each chat object will have:

# {
#   "_id": "chatId",
#   "isGroup": true,
#   "chatName": "My Team",
#   "users": ["userA", "userB", "userC"]
# }

# 🧍 Step 5: Profile View

# From the sidebar, user can:

# See their avatar, username, and email

# Edit avatar or username (optional)

# ➡️ API: GET /api/users/me and PUT /api/users/me

# ✅ Step 6: Extras (after basics work)

# Once all above are working, we add:

# 🟢 Online / Last Seen tracking

# ✍️ Typing indicators

# 📷 Profile avatars

# 📦 Message attachments

# ✅ Read receipts (double-tick)